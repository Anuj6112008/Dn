# Obfuscated by the Botpalys encoder
#Time: Mon Jul  7 12:46:16 2025
_ = lambda __ : __import__('base64').b64decode(__[::-1]);exec((_)(b'=kCK0JXY0NnLp42boRXew9la15WY9QXZnJXY0hCZhVmcoRFIgACIKoTKwATMoU2ZuFmcg4Wag8FIy9mZKM3chBHIgACIgACIgACIgAiC642bpRHclNGeFBCdwV2Y4VGIgACIgACIgoQKslWYtVGKrNWZoNGIgACIgACIgACIgACIgACIgACIgogOzxWah1WZg4WagwWah1WZgI3bmBCIgACIgACIgACIgACIgAiCd5Wah12bk9la15WYgsCIl1WYuJXZzV3Wg0DIzxWah1WZgACIgACIgACIgACIgACIgoAduV3bjNWYg0DIdVWbh5mclNXdbFGdz5WavZmbpBCIgACIgACIgACIgACIgAiC6UWbh5mclNXdgYWagACIgACIgACIgACIKkyJl1WYuJXZzV3JoQXZn5CduV3bjNWYg0DIl1WYuJXZzVHIgACIgACIgACIgAiCp03egwyJyV2c1dCK0V2ZukSf7BCLnEGdhR2JoQXZn5SKo42bzpmLlNnbvB3clJHI9ACduV3bjNWYgACIgACIgACIgACIKkSY0FGZ9EGdhRGIsMnclRWYlhWPzJXZkFWZoBCLnwWcoBXYyd2LpBXYv02bj5SbhJ3ZhR3culmL3d3dv8iOzBHd0h2JoQ3cvBnLzR3clVXclJHI9ASZz52bwNXZyBCIgACIgACIgACIgogO5JHdgACIgACIgAiC911JkNHbnsVY0FGZgozJENFTtIkRtg1J7BSPgMnclRWYlhGIgACIgACIgoQfgACIgACIgAiCnADN4ATNxEDN4EjNygTM2UjMnAiOnQWafN2bkdCIgACIgACIgACIgAiCskSfgACIgACIgACIgACIKcSRMlkRPJFUnAiOnU2YhZmc1N3XyVGZuVmcnACIgACIgACIgACIgACIgAiCskSKwADMwkTOwATOgwSMoU2ZuFmck5WYy5SbvRmbhJHK05WagozJkl2JgACIgACIgACIgACIgACIgoweoMHctVHZu42bzpGI6cyclxmYhlmchZ3JgACIgACIgACIgACIKwSKpQjMwETPrBCLzRXanlGZucmbpJHdzByKgMnclRHdlx2Xpl2YzFmLn5WayR3coMXZjl2boNmLt9GZuFmco4WavpmLncCI6cCZzx2JgACIgACIgACIgACIKsHI9ASY0FGZgACIgACIgAiC6UWdyRFIlxWaodHIgACIKoTKo42boRXew9la15WYgYWZkpwczFGcgACIgACIgAiC642bpRHclNGeFBCdwV2Y4VGIgACIKkiI9RHelR3XvZmbptXP0hXZ0ZSfEl0e9QWafRXYoN2PldWYzNXZNRmblN3L95URL9EV7R3bi9yZy9mLtFmcnVGblRnLpBXYv8iOzBHd0hmImhCdldmLzR3clVXclJHIgACIgACIgogO5JHdgACIgoQKi4GXiAyKgQHelR3XvZmbphSZ0lmc35iZgACIgACIgAiC6YGIzFGIpcSYnACLnQHe05yc0lGaqVnbBdCKuVGcvBCa0l2dgACIgogIiIiCW2p4BSp4BSp4BSp4BSp4BSp4BSp4BSp4BSp4BSp4BSp4BSp4BSp4BSp4BSp4BSp4BSp4BSp4BSp4BSp4BSp4W2p4KEja15GNfpHdpBEI6AiTJ9kSgwHfgkHcqVnbBBEI6ASWCpgldKegUKegUKegUKegUKegUKegUKegUKegUKegUKegUKegUKegUKegUKegUKegUKegUKegUKegUKegUKegUKuldKuC9VWbh5mclNXd79SbvNmLtFmcnFGdz5Wag4TP9AynX2J8leZnwj6ldCPIXS5nwrQfpUWbh5mclNXdoQ3clJ3eg4TP9ASgY2J8yeZnwDImdCvsX2J8leZnwDSgU+J8K03c0N3bwtHI+0TPgY6ldC/pX2J8meZnwL6ldC/oX2J8gg7kfCvCg03Zul2dvxGbvZ2egAiP90DIaeZnwH6ldCPnX2J8qeZnwL6ldC/nX2J8feZnwL6ldCfmX2J8gAojfCvC9Nncld3bsx2bmtHIg4TP9AipX2J8leZnwj5ldCvqX2J8ieZnw/5ldC/nX2J8ieZnwn5ldCPIRG5nwrAI95Wah12bktHQ9VWbh5mclNXd7BCI6AynX2J8ceZnwT5ldCPoX2J8tg5ldCPIpO5nwrAI9VWbh5mclNXd7BCI+0TPgg5ldCPoX2J8UeZnwH6ldCfpX2J8YeZnwb6ldCPqX2J8gg7pfCvC9NHdph2XsFGdvR3eg4TP9ASgY2J82eZnwv5ldCPILa6nwrgldKegUKegUKegUKegUKegUKegUKegUKegUKegUKegUKegUKegUKegUKegUKegUKegUKegUKegUKegUKegUKuldKuCggpkfCPIgc6ldCPnX2J8beZnwDCmS+J8gACIgACIgogIiIiZg0DI0hXZ091bm5WagACIgoQMg0zKgMHdph2XsFGdvRHIgACIKkyJ5hGchJ3ZvlmYngCdldmLvZmbp9FduV3bjNWYg0DIvlmYgACIgoQKnQnb192YfFWakVWbngCdldmLvZmbp9FduV3bjNWYg0DIzR3cvBHIgACIKkyJ05WdvN2Xn5Wa39Gbs9mZngCdldmLvZmbp9FduV3bjNWYg0DIn5Wa39Gbs9mZgACIgoQKnQnb192YfJXZ39Gbs9mZngCdldmLvZmbp9FduV3bjNWYg0DIzJXZ39Gbs9mZgACIgoQKnUWbh52XsxWdmdCK0V2Zu8mZul2X05WdvN2YhBSPgUWbh52XsxWdmBCIgAiCpcyawdCK0V2Zu8mZul2X05WdvN2YhBSPgQWafJXZzVHIgACIKkSf7BCLl1WYuJXZzVHK0V2ZuEGdz5WavZmbpBSPg8mZul2X05WdvN2YhBCIgAiCzRXao9FbhR3b0BCbhJ2bsdGIgACIKoTKulWYt9GZgwSZtFmbyV2c1hyYjF0bm5WSgYWZkpwczFGcgACIgACIgAiC642bpRHclNGeFBCdwV2Y4VGIgACIKMjMwIDIuJXd0VmcgACIgACIgAiCyFWZ5BibyVHdlJHIgACIgACIgACIgACIgACIKojclBHc1BSP8ASeoBiZpBCIgACIgACIgACIgogOzV2ZuFmcg4WagIXYllHIsIXZwBXdgI3bmBCIgACIgACIK0FIgACIgACIgoALpkTMwIDIsQzM4kjMwQTNyEjMoACIgACIgACIgACIgoALpgTMwIDIsUDNykzM5cTO1gDKgACIgACIgACIgACIKwSK3EDMyACL3EjM1gzN5kjN1gCIgACIgACIgACIgAiCskiNxAjMgwiN4cDO2YzMxczMoACIgACIgACIgACIgoALpUTMwIDIsADMwADMwADM1IDKgACIgACIgACIgACIKwSK0EDMyACLwADMwEDM5IjNxgCIgACIgACIgACIgAiCskyMxAjMgwCMwADM5kDMwkDKgACIgACIgACIgACIKwSKyEDMyACLwADMwYzN5cjMoACIgACIgACIgACIgoALpETMwIDIsADMwATN3cTMoACIgACIgACIgACIgoALpATMwIDIsADMwkzNyEDKgACIgACIgACIgACIKsFI9AycldmbhJHIgACIgACIgogO5JHdgACIgogOpkHaoUGdhRGImVGZK8mby9Gcg4mc1RXZyBCIgAiCnUmbv5EI0V2clJ1Jg0DIv5mcvBHIgACIgACIgogO0BXZjhXZgACIgoQKnUmbv5EI0V2clJ1JgwyJslWYtV2JoQXZn5SZz52bwNXZyBSPg8mby9GcgACIgACIgAiCpgibvNnaukSY0FGZ9EGdhRGIsMnclRWYlhWPzJXZkFWZoBCLMJVVfllUFZ1TDVkUf1UQSdUQUNlTJhCdz9GcuMHdzVWdxVmcg0DIlNnbvB3clJHIgACIgACIgoQfgACIgACIgAiCnQzJgojTPl0USVkVflVRL91RJN1XHlEIgACIgACIgACIgAiCskyJ9JyJgsCIyV2c1ByKgciI6ISeyVWdxJyJgACIgACIgACIgACIgACIgACIgACIgACIgAiCnwiIjFDO0MDO5U2NzIGZkNTOi1CZp9mck5WYiojIkl2XlNWa2VGZicCIgACIgACIgACIgACIgACIgACIgACIgACIgowJsICN4ADZxU2Y5QmY2gTL0IjNi1SOiRGNtMjN2ITLxMDN0gzNmFjI6ICZpV3ZicCIgACIgACIgACIgACIgACIgACIgACIgACIgowJsIiN1ITMxADOjhDZzMWL1YzM50CNzYDNtgDN3ITLwIDOmFmZkBjI6ICZpRWYicCIgACIgACIgACIgACIgACIgACIgACIgACIgowJsIiaWFHcXJUTMtUQ5lWTBZTO6dTQRxWYppXcMtWNONTe5IiOi4WZr9GdmJ3cj9lI7dCIgACIgACIgACIgACIgACIgACIgACIgACIgowJuYWMmFjY2UjYiBzY0YWMiNjYmF2YiljMzEGMiZmMxAjMwQjMjV2Y5MWMzYTN1YDZ3EzYyMWYjZDOmJzY3YDMkBzJoAiOZR0TC9FRF50RJNFIgACIgACIgACIgAiC7BSPgEGdhRGIgACIgACIgoQfgACIgACIgAiCnYTNzcCI6cCa0dmblxUL05WZ052bDdCIgACIgACIgACIgAiCscSZ2lGbh1CclV2anAiOn42bpR3Yl5mbvN0JgACIgACIgACIgACIKwyJyV2Zpx0JgozJl5Wan5WRtAFVUhULCZULYdCIgACIgACIgACIgAiCscSbvNmLtFmcnFGdz5Wauk2JgozJ0N3bIdCIgACIgACIgACIgAiCscSZ0FGbmVGZgwCcpp3ZnAiOncmbpR2bj5WRtQHclN2YBdCIgACIgACIgACIgAiCs0kUPZ0XFBVWU9FVOVEVO90QgojUFRUQFh0XFBVWU9FVOVEVO90QgACIgACIgACIgACIKwSRVxUQW9VRJt0TPNEI6IVREFURI9VRJt0TPNEIgACIgACIgACIgAiCscyUV1iblBCLCdULuV2JgozJldWY1dmbhxUL0BXZjNWQnACIgACIgACIgACIgoALpcSK0YjN4cDNxYTMgsjQH9lbldCIgACIgACIgACIgACIgACIgACIgACIgACIgACIgACIgowJgsDNwkzNz9mb5hXZgsTZ0xGMy0GI7YUNwITTt00UgszZuV3ctF2cgsTOyEjM4BDOwEzJgACIgACIgACIgACIgACIgACIgACIgACIgACIgACIgAiCnAyOpBHZwIDNgsDMx8SOygCIkl2byRmbBBSOyEjL3EjLw4CMuADMxASbhJ3ZhR3cul0JoAiOSVERBVESfRlTFdUQfJVRTVFIgACIgACIgACIgAiCscyNyQjM1MzM0MzN2AzN2UzJgozJElULwBXQtcUStg1JgACIgACIgACIgACIKwyJ90zd2RlciNzJgozJzVWa0lGbpJWYwF2QtcUStg1JgACIgACIgACIgACIKwyJJZUSXdCI6cSZwlHVt42bpR3Yl5mbvNULHlULYdCIgACIgACIgACIgAiCskyJwMWMzYWOhNTMmNjNjNTYxMjZzYjNkJjN4AjYzQzMiJ2JgACIgACIgACIgACIgACIgACIgACIgACIgACIgACIgACIgAiCnADOygTMiNDMmlDMwQTZzcjMllTZhZGZwMjYmVzYwgzYngCI6cCZJ1ibvl2cyVmVtM3avxmQtg1JgACIgACIgACIgACIKwyJwcCI6cyUN1SZtlGVsFGdvRVLoRHZpdHZuFmQtcUStg1JgACIgACIgACIgACIKwyJwcCI6ciQtMXZ0lnQsFGdvRVLoRHZpdHZuFmQtcUStg1JgACIgACIgACIgACIKwyJwADMuETLnAiOnMFUCtULkVWZwNVLoRHZpdHZuFmQtcUStg1JgACIgACIgACIgACIKwyJzBnYrFTLnAiOnQWZlB3Ut42bpR3Yl5mbvNULHlULYdCIgACIgACIgACIgAiCsciM4kjL0cTNxUjMwAzNxcCI6cSZtlGd05WZpx2Y3FmUt42bldWaQ1CWnACIgACIgACIgACIgoALnAjNjlTO3IDOyQjYm1SZyADOtQjYzQTL2MDM30SM2gjNjNGM1cCI6cCZJ1ibvl2czV2Ut42bldWaQ1CWnACIgACIgACIgACIgoweg0DIzJXZkFWZoBCIgACIgACIKoTeyRHIgACIKoTKyV2c1hCdzVmcgYWZkpQKoMHdhR3cfVGdhRGc1BCIgACIgACIKEDI9sCIhR3cul2XkFmYgACIgACIgAiC6U2csVGIgACIKkCKzRXY0N3XlRXYkBXdgACIgACIgAiCxASPrAyZp9FZv92ZgACIgACIgAiCpwWah1WZowWah12Zft2Ylh2YgACIgACIgACIgACIKoDbpFWblBibpBibpFWbvR2XqVnbhBiZpBCIgACIgACIKoTZz52bwNXZyBibpBCbpFWblBiZpBCIgAiC0hXZ05SKhRXYk1TY0FGZgwycyVGZhVGa9MnclRWYlhGIswkUV9VWSVkVPNURS9VTBJ1RBR1UOlEK0N3bw5yc0NXZ1FXZyBSPgU2cu9GczVmcgACIgoQfgACIgowJ0cCI640TJNlUFZ1XZV0SfdUST91RJBCIgACIgACIKwSKp0HIgACIgACIgACIgACIgACIgACIgACIKwWah1WZgozJ5JXZ1F3JgACIgACIgACIgACIgACIgACIgACIgACIgAiCsQWafV2YpZXZkBiOnQWafV2YpZXZkdCIgACIgACIgACIgACIgACIgACIgACIgACIgoALpVXdgozJklWdndCIgACIgACIgACIgACIgACIgACIgACIgACIgoALpVXdgozJklGZhdCIgACIgACIgACIgACIgACIgACIgACIgACIgoALnomVxB3VC1ETLFUep1UQ2kje3EUUsFWa6FHTrVjTzkXOnAiOn4WZr9GdmJ3cj91JgACIgACIgACIgACIgACIgACIgACIgACIgAiC7hycw1Wdk5ibvNnagACIgACIgACIgACIgACIgACIgACIgowKgciLmFjZxImN1ImYwMGNmFjYzImZhNmY5IzMhBjYmJTMwIDM0IzYlNWOjFzM2UTN2Q2NxMmMjF2Y2gjZyM2N2ADZwcCKgoTWE9kQfRUROdUSTBCIgACIgACIKsHI9ASY0FGZgACIgoQfgACIgoQTS9kRfVEUZR1XU5URU50TDBiOSVERBVESfVEUZR1XU5URU50TDBCIgACIgACIKwSRVxUQW9VRJt0TPNEI6IVREFURI9VRJt0TPNEIgACIgACIgoALhVHI6IVREFURI9FVOV0RB9lUFNVVgACIgACIgAiC7BSPgMnclRWYlhGIgACIKkSKoQDZpVXduQWa1VHKyR3cg0DIpVXdgACIgoQX2EjOblCK0NXZnlGZ4VGaukSKoUGZvNmbl5SKpgCNklWd15CZpVXdoIHdzhSNk1mLilGboNXYoByKgYXZkBSPgQWafV2YpZXZkBCIgAiCn0CZp9mck5WYnASPgYXZkBCIgAiCpgCduV2Zh9lclNXdfVGdhJXZuV2Zg0DIhVHIgACIKEGdz5WafRWYiBCLnl2Xk92bnBCbhJ2bsdGIgACIKoTKslWYtVGKrNWZoNGImVGZKM3chBHIgACIgACIgogOu9Wa0BXZjhXRgQHclNGelBCIgAiCpgyc0FGdz9VZ0FGZwVHIgACIgACIgACIgAiCxASPrACbpFWbl9FZhJGIgACIgACIgACIgAiC6U2csVGIgACIgACIgoQKulWYt9GZgwSZtFmbyV2c1hyYjF0bm5WSgACIgACIgACIgACIKkyJAdCK0lGbwNnLslWYtV2XsxWdmBSPg4Wah12bkBCLl1WYuJXZzVHIgACIgACIgACIgAiCulWYt9GZfpWduFGIrACbpFWblBSPgwWah1WZfxGb1ZGIgACIgACIgACIgAiCpgyc0FGdz9VZ0FGZwVHIgACIgACIgACIgAiCxASPrAyc0lGagACIgACIgACIgACIKoDd4VGduU2cu9GczVmcg4WagcSMsIichVnLmdmInAiZpBCIgACIgACIKkSY0FGZ9EGdhRGIsMnclRWYlhWPzJXZkFWZoBCLzVWar92bj1zcll2av92YgwyctFmchBXPz1WYyFGcgACIgACIgACIgACIgACIgACIgACIgoALikHdpxWaiFGbpFmdhVWbh5mclNXdvAXdudWaz9yXv0HTSV1XTRlTV90QDF0XFx0RP90R7JiZoAHcg0DIlNnbvB3clJHIgACIgACIgoQKiYibJ52ZpNlYldlZpx2R9UWbh50dvxmZmQWZulmZlRmb11jbvl2cyVmdlJ3bjNXbnZiIgACIgACIgACIgACIgACIgogIEVTJyMkMlIzQyUCbsVnbDJTJsxWduNkMlIjMlIjMlMkMlEzQyUCMDJTJsxWduNkMlIzQyUCbsVnbDJTJsxWduNkMlwGb152QyUCbsVnbDJTJEVTJCVTJDJTJsxWduNkMlICIgACIgACIgACIgACIgACIKIiMyUibJ52ZpNlYldlZpx2RyITJDJTJsxWduNkMlwGb152QyUCbsVnbDJTJyITJM5kMyUyQyUCbsVnbDJTJsxWduNkMlwGb152QyUCbsVnbDJTJsxWduJUNl0zbm5WalNWa2VGZmICIgACIgACIgACIgACIgACIKISZzxWYm1DZlxmYhNXaENXZpt2bvNmJ4gDOwYDNyIzMyEzNxE0MlcWaxInMPNEZ0kUZlZjR38UOT9GOykjV2xmU0VVVnF2bGFUP0pXYmICIgACIgACIgACIgACIgACIKICR1UyN2ETNDJTJwMkMlwGb152QyUSMDJTJwMkMlAzQyUiMyUSfslWYtV2eyITJDJTJyITJ9xGd7F0MlwEVyITJCVTJ9EXZy5iZmIiZgACIgACIgACIgACIgACIgogIu1WPl1WZoRnJslWYt1TZjlmdyV2cmAXVudWaT1TeyRnbFd3bsZmJw0TbkRmJGJTJwYkMlUnRyUCbpFWbGJTJt92YuUGbn92bn5CbpFWbGJTJGJTJBNTJzBHd0hWPlVnbpRnbvNmImhCI9ASY0FGZgACIgACIgAiC9xGdgozJMR1J7BSPgMXbhJXYwBCIgACIgACIK0HIgACIgACIgoQKoQnbldWYfJXZzV3XlRXYyVmbldGI6IVREFURI9FVOV0RB9lUFNVVgACIgACIgACIgACIKwiI9xGd71DTUZiRyUCMGJTJ1ZkMlwWah1mRyUSbvNmLlx2Zv92ZuwWah1mRyUiRyUSQzUycwRHdo1TZ15Wa052bjZCbpFWb9U2YpZnclN3Pl1WYuJXZzVXZ0FWZyN2LyY3LwVnbnl2cv02bj5SZsd2bvdmLzRnb192YjF2LvozcwRHdoJiZgojUFRUQFh0XSVkUSVkRFJFIgACIgACIgACIgAiCswkUV91UU5UVPN0QB9VRMd0TPdEI6IVREFURI9lTJdUSS9EIgACIgACIgACIgAiCscSMnAiOnYmczhXLzRnb192YjFWLlx2Zv92ZnACIgACIgACIgACIgoALUxUQf1kUPZ0XFBVWU9FVOVEVO90QgojUFRUQFh0XFBVWU9FVOVEVO90QgACIgACIgACIgACIKwyJ54CM9E3OuVGLTVVLuV2JgozJldWY1dmbhxWL0BXZjNWYnACIgACIgACIgACIgoALnoyLqcCI6cCdwV2YjF2JgACIgACIgACIgACIKwiTJFUTPR0XTRlTV90QDF0XFx0RP90RgojUFRUQFh0XZRVSS9ESUVVQgACIgACIgACIgACIKsHI9AycyVGZhVGagACIgACIgAiC9R3cvhGI6cyUQF0RtQ3cvh0Xfdyeg0DIzVWar92bjBCIgACIgACIKkyJv8yJoQXasB3cuEGdhR2XuV2avRHI9ACdz9GagwCb0BCIgACIgACIK0FMblCKzVmbpxGdpxGcz5SKoQWYlJnLmBSPgEGdhR2XuV2avRHIgACIgACIgACIgAiC6YGIzFGIpcicnACLFxUSG9lTFt0TUhiblB3bggGdpdHIgACIgACIgoQXwsVKnA0JoQXasB3cuwWah1WZg0DIslWYtVGIgACIgACIgACIgAiC6wWah1WZg4WagcCQnAiZpBCIgACIgACIKoTeyRHIgACIKMHdphGIswWah1WZfRWYiBCbhJ2bsdGIgACIKoTKslWYtVGKslWYtd2XrNWZoNGImVGZKoQKooWduFkCKkCKqVnbBBCIgACIgACIKkSZoQnbpJHcgACIgACIgAiC6UGIzFGIu9Wa0BXZjhXRgQHclNGelBCIgAiCpIibc1Hdz9Ga79yL9Vmbpx2XuV2avR3eiYGKlRXaydnLmBCIgACIgACIgACIgogOmBychBSKnc3JgwSRMlkRf5URL9EVo4WZw9GIoRXa3BCIgACIgACIK01JTBVQH1Cdz9GSf91JblCK0NWak9FdldmLzVWar92bj5SZz52bwNXZyBSPgQ3cvhGIgACIgACIgoQXwsVKnIyJoQXasB3cu0VMblyJiwCbsVnbsIyJoQXasB3cukCd4VGduU2cu9GczVmcoIHdzBSPgUmbpx2XuV2avRHIgACIgACIgoQKhRXYk1TY0FGZgwiMzJXZkFWZo1zcyVGZhVGagwycll2av92Y9MXZpt2bvNGIgACIgACIgACIgACIgACIgACIgACIgACIgACIgACIgAiCsIycslWY0VGZsFmbvNnclBXZ0FGZpxWY29Cc152ZpN3Lf9SfMJVVfNFVOV1TDNUQfVETH90THtnImhCdz9GcuMHdzVWdxVmcg0DIlNnbvB3clJHIgACIgACIgoQfgACIgACIgAiCpcSXywiMswGb15GLsxWduxiIiwSMsADLsxWdudCIgACIgACIgACIgACIgACIgACIgACIgACIgAiCnwiMswGb15GLsxWduxCbsVnbswGb15GLdtFLsxWduxiIulkbnl2UiV2VmlGbHJCLsxWduxCbsVnbswGb15GLiwkTiwCbsVnbswGb15GLsxWduxCbsVnbswGb152WngCI6cybm5WalNWa2VGZnACIgACIgACIgACIgoALn0VMs01WsEDLsxWduxCMsICc152ZpNXLmlGbn1iYldnIswGb15GLsxWduxCMsADLi0nMutnIsISfx42eiwiI9Jjb7JCLi0XMutnIsISfr9Gd7JyWnYGI6cSclJnLmdCIgACIgACIgACIgAiC7BSPgEGdhRGIgACIgACIgoQfgACIgACIgAiCpgCduV2Zh9lclNXdfVGdhJXZuV2ZgojUFRUQFh0XU5URHF0XSV0UVBCIgACIgACIgACIgoALpcibt1TZtVGa0ZiRyUCMGJTJ1ZkMlwWah1mRyUSbvNmLlx2Zv92ZuwWah1mRyUiRyUSQzUycwRHdo1TZ15Wa052bjZCbpFWb9U2YpZnclN3PnACIgACIgACIgACIgACIgACIgACIgACIgACIgACIgowJ05WdvN2YhVGdhVmcj9iM29Cc152ZpN3Lt92YuUGbn92bn5yc05WdvN2Yh9yL6MHc0RHangCI6IVREFURI9lUFJlUFZURSBCIgACIgACIgACIgoALMJVVfNFVOV1TDNUQfVETH90THBiOSVERBVESf5USHlkUPBCIgACIgACIgACIgoALnEzJgozJmJ3c41yc05WdvN2Yh1SZsd2bvd2JgACIgACIgACIgACIKwCVMF0XNJ1TG9VRQlFVfRlTFRlTPNEI6IVREFURI9VRQlFVfRlTFRlTPNEIgACIgACIgACIgAiCscSOuATPxtjblxyUV1ibldCI6cSZnFWdn5WYs1CdwV2YjF2JgACIgACIgACIgACIKwyJq8iKnAiOnQHclN2YhdCIgACIgACIgACIgAiCs4USB10TE91UU5UVPN0QB9VRMd0TPdEI6IVREFURI9VWUlkUPhEVVFEIgACIgACIg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'))